#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hmpg:server');
var fs = require('fs');
var http = require('http');
var https = require('https');
var key  = fs.readFileSync('E:/lecerts/domain.key', 'utf8');
var cert = fs.readFileSync('E:/lecerts/domain.crt', 'utf8');

/**
 * Get port from environment and store in Express.
 */

var httpsPort = normalizePort(process.env.PORT || '443');
var httpPort = normalizePort(process.env.PORT || '80');
app.set('httpsPort', httpsPort);
app.set('httpPort', httpPort);

/**
 * Listen on provided port, on all network interfaces.
 */

// https
var credentials = {key: key, cert: cert};
var httpsServer = https.createServer(credentials, app);
httpsServer.listen(httpsPort);
httpsServer.on('error', onErrorHttps);
httpsServer.on('listening', onListeningHttps);

// http
var httpServer = http.createServer(app);
httpServer.listen(httpPort);
httpServer.on('error', onErrorHttp);
httpServer.on('listening', onListeningHttp);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for server "error" event.
 */

function onErrorHttps(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + httpsPort
    : 'Port ' + httpsPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onErrorHttp(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + httpPort
    : 'Port ' + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for server "listening" event.
 */

function onListeningHttps() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + httpsPort;
  debug('Listening on ' + bind);
}

function onListeningHttp() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + httpPort;
  debug('Listening on ' + bind);
}
